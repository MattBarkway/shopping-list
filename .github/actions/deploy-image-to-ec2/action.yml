name: Build and Push Docker
description: yes

inputs:
  ecr_repository_url:
    description: 'ECR repository URL'
    required: true
  aws_access_key_id:
    description: 'The AWS access key ID'
    required: true
  aws_secret_access_key:
    description: 'The AWS secret access key'
    required: true
  aws_region:
    description: 'The AWS region'
    required: true
  container_name:
    description: 'Name of the container'
    required: true
  ec2_instance_name:
    description: 'Name of the EC2 instance'
    required: true
  ports:
    description: 'Port mapping for the docker run command'
    required: true
  ssh_private_key:
    description: 'SSH private key for connecting to the EC2 instance'
    required: true
  ec2_instance_username:
    description: 'Username for SSH authentication to the EC2 instance'
    required: true

runs:
  using: 'composite'

  steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up SSH private key
      shell: bash
      run: |
        mkdir -p $HOME/.ssh
        echo "${{ inputs.ssh_private_key }}" > $HOME/.ssh/id_rsa
        chmod 600 $HOME/.ssh/id_rsa

    - name: Get EC2 IP
      shell: bash
      id: get-public-ip
      run: |
        echo "EC2_INSTANCE_PUBLIC_IP=$(aws ec2 describe-instances \
          --filters 'Name=tag:Name,Values=${{ inputs.ec2_instance_name }}' \
          --query 'Reservations[].Instances[0].PublicIpAddress' \
          --output text)" >> $GITHUB_ENV

    - name: Install docker and aws cli
      shell: bash
      run: |
        ssh -i $HOME/.ssh/id_rsa \
          -o StrictHostKeyChecking=no \
          -o UserKnownHostsFile=/dev/null \
          -l ${{ inputs.ec2_instance_username }} ${{ env.EC2_INSTANCE_PUBLIC_IP }} \
          'sudo yum update -y && \
          sudo yum install docker -y && \
          sudo yum install aws-cli -y && \
          sudo service docker start && \
          sudo usermod -a -G docker ec2-user'

    - name: Run deployment script on EC2 instance
      shell: bash
      run: |
        ssh -i $HOME/.ssh/id_rsa \
          -o StrictHostKeyChecking=no \
          -o UserKnownHostsFile=/dev/null \
          -l ${{ inputs.ec2_instance_username }} ${{ env.EC2_INSTANCE_PUBLIC_IP }} \
          'sudo systemctl restart docker && \
          echo "access key ${{ inputs.aws_access_key_id }}" && \
          echo "secret key ${{ inputs.aws_secret_access_key }}" && \
          echo "region ${{ inputs.aws_region }}" && \
          echo "ecr url ${{ inputs.ecr_repository_url }}" && \
          echo "container name ${{ inputs.container_name }}" && \
          echo "ports ${{ inputs.ports }}" && \
          docker stop ${{ inputs.container_name }} || true && \
          docker rm ${{ inputs.container_name }} || true && \
          aws ecr get-login-password --region ${{ inputs.aws_region }} | docker login --username AWS --password-stdin ${{ inputs.ecr_repository_url }} && \
          echo ${{ inputs.ecr_repository_url }}/${{ inputs.container_name }}:latest && \
          docker pull ${{ inputs.ecr_repository_url }}/${{ inputs.container_name }}:latest && \
          docker run -d -p ${{ inputs.ports }} ${{ inputs.ecr_repository_url }}/${{ inputs.container_name }}:latest'

    - name: Cleanup SSH private key
      shell: bash
      run: |
        rm $HOME/.ssh/id_rsa

name: Build and Push Docker
description: yes

inputs:
  ecr_repository_url:
    description: 'ECR repository URL'
    required: true
  aws_access_key_id:
    description: 'The AWS access key ID'
    required: true
  aws_secret_access_key:
    description: 'The AWS secret access key'
    required: true
  aws_region:
    description: 'The AWS region'
    required: true
  container_name:
    description: 'Name of the container'
    required: true
  ec2_instance_name:
    description: 'Name of the EC2 instance'
    required: true
  ports:
    description: 'Port mapping for the docker run command'
    required: true
  ssh_private_key:
    description: 'SSH private key for connecting to the EC2 instance'
    required: true
  ec2_instance_username:
    description: 'Username for SSH authentication to the EC2 instance'
    required: true

runs:
  using: 'composite'

  steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure SSH
      uses: webfactory/ssh-agent@v0.5.0
      with:
        ssh-private-key: ${{ inputs.ssh_private_key }}

    - name: Get EC2 IP
      shell: bash
      id: get-public-ip
      run: |
        echo "EC2_INSTANCE_PUBLIC_IP=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=${{ inputs.ec2_instance_name }}" \
          --query "Reservations[].Instances[0].PublicIpAddress" \
          --output text)" >> $GITHUB_ENV

    - name: Transfer Dockerfile and scripts
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ env.EC2_INSTANCE_PUBLIC_IP }}
        username: ${{ inputs.ec2_instance_username }}
        key: ${{ inputs.ssh_private_key }}
        source: .
        target: /home/${{ inputs.ec2_instance_username }}



    - name: Run deployment script on EC2 instance
      uses: appleboy/ssh-action@master
      with:
        host: ${{ env.EC2_INSTANCE_PUBLIC_IP }}
        username: ${{ inputs.ec2_instance_username }}
        key: ${{ inputs.ssh_private_key }}
        port: 22
        script: |
          ssh -i /home/${{ inputs.ec2_instance_username }}/your-key.pem ${{ inputs.ec2_instance_username }}@${{ inputs.ec2_instance_name }} << EOF
            docker stop ${{ inputs.container_name }} || true
            docker rm ${{ inputs.container_name }} || true
            docker pull ${{ inputs.ecr_repository_url }}:latest
            docker run -d -p ${{ inputs.ports }} --name ${{ inputs.container_name }} ${{ inputs.ecr_repository_url }}:latest
          EOF
